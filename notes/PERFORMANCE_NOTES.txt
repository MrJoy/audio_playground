http://devblog.avdi.org/2015/06/03/benchmarking-ruby-dispatch-strategies/

https://blog.engineyard.com/2015/seven-unusual-ruby-datastores
http://samsaffron.com/archive/2015/03/31/debugging-memory-leaks-in-ruby
  http://tmm1.net/ruby21-objspace/
  https://github.com/tmm1/rbtrace
  https://github.com/discourse/discourse/blob/586cca352d1bb2bb044442d79a6520c9b37ed1ae/lib/memory_diagnostics.rb

http://dev.mensfeld.pl/2015/04/ruby-global-method-cache-invalidation-impact-on-a-single-and-multithreaded-applications/
http://www.saturnflyer.com/blog/jim/2015/04/22/the-difference-between-instance_eval-and-instance_exec/
http://hawkins.io/2015/04/better-persistence-with-rom/
http://www.sitepoint.com/ruby-uses-memory/

https://github.com/schneems/derailed_benchmarks
https://github.com/rails/rails/pull/21057
https://github.com/SamSaffron/memory_profiler
http://www.schneems.com/2015/05/11/how-ruby-uses-memory.html
https://github.com/schneems/derailed_benchmarks/blob/master/lib/derailed_benchmarks/tasks.rb#L134-L165
http://samsaffron.com
https://rubygems.org/gems/memory_profiler
gem stackprof
concurrent-ruby
http://www.mikeperham.com/2015/08/06/sidekiq-enterprise/
https://github.com/ko1
https://github.com/ko1/allocation_tracer
https://github.com/ko1/pretty_backtrace
https://github.com/ko1/gc_tracer

  task :foo => [:setup] do
    require 'objspace'
    call_app

    before = Hash.new { 0 }
    after  = Hash.new { 0 }
    after_size = Hash.new { 0 }
    GC.start
    GC.disable

    TEST_COUNT.times { call_app }

    rvalue_size = GC::INTERNAL_CONSTANTS[:RVALUE_SIZE]
    ObjectSpace.each_object do |obj|
      after[obj.class] += 1
      memsize = ObjectSpace.memsize_of(obj) + rvalue_size
      # compensate for API bug
      memsize = rvalue_size if memsize > 100_000_000_000
      after_size[obj.class] += memsize
    end

    require 'pp'
    pp after.sort {|(k,v), (k2, v2)| v2 <=> v }
    puts "========="
    puts
    puts
    pp after_size.sort {|(k,v), (k2, v2)| v2 <=> v }
  end
