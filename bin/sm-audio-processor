#!/usr/bin/env ruby
lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require "sparkle_motion"
SparkleMotion.init!
SparkleMotion.use_cli!
SparkleMotion.use_audio!
LOGGER = SparkleMotion.logger
require "set"

Thread.abort_on_exception = true

# Example of how to save data:
#   wav = CoreAudio::AudioFile.new("sample.wav", :write, format:  :wav,
#                                                        rate:     dev.nominal_rate,
#                                                        channels: dev.input_stream.channels)
#   wav.write(w)
#   wav.close

def to_int_set(value, default); value ? Set.new(value.split(/\s*,\s*/).map(&:to_i)) : default; end
def pot?(value); value.to_s(2).split(//).sort.map(&:to_i).inject(:+) == 1; end

MODES   = %w(interactive batch)
WINDOWS = (4..15).map { |n| 2 << n }.map(&:to_s)
SPANS   = ("1".."1024")
IN_DEV  = SparkleMotion::Audio::DeviceInputStream
IN_FILE = SparkleMotion::Audio::FileInputStream
parser  = SparkleMotion::CLI::ArgumentParser
          .new(window:          512,
               span:            4,
               low:             true,
               high:            true,
               mode:            :batch,
               map:             nil,
               frequency_range: [500, 3_000])
parser
  .require!(%i(input))
  .allow!(:skip_low)
  .allow!(:skip_high)
  .allow!(:freq_start)                 { |vv, rr| rr[:frequency_range][0] = vv.to_i }
  .allow!(:freq_end)                   { |vv, rr| rr[:frequency_range][1] = vv.to_i }
  .allow!(:map)                        { |vv, rr| rr[:map] = to_int_set(vv, [0, 1]) }
  .allow!(:input_channels)             { |vv, rr| rr[:channels] = to_int_set(vv, [0]) }
  .allow!(:window, allowed: WINDOWS)   { |vv, rr| rr[:window] = vv.to_i }
  .allow!(:span, allowed: SPANS)       { |vv, rr| rr[:span]   = vv.to_i }
  .allow!(:mode, allowed: MODES)       { |vv, rr| rr[:mode]   = vv.to_sym }
  .allow!(:input_device, kind: :input) { |vv, rr| rr[:in] = [IN_DEV, vv] }
  .allow!(:input_file, kind: :input)   { |vv, rr| rr[:in] = [IN_FILE, vv] }

options, leftovers = parser.parse!(ARGV)
if leftovers.length > 0
  LOGGER.error { "Unexpected arguments: #{leftovers.inspect}" }
  exit 1
end

in_stream = options[:in][0].new(options[:in][1], options[:window])
puts "#{in_stream.name}: Sample rate is #{in_stream.sample_rate}hz."

reporter = SparkleMotion::Audio::StreamReporter.new(in_stream.name, 1.0, LOGGER)

use_low   = options[:low]
use_high  = options[:high]
range     = options[:frequency_range]
span      = options[:span]
window    = options[:window]
filter    = SparkleMotion::Audio::BandPassFilter
            .new(range, in_stream.sample_rate, window * span, use_low, use_high) do |ss, ee, cc|
              puts "#{in_stream.name}: #{cc} bins, from #{ss} to #{ee}."
              reporter.reset!
            end

if options[:map]
  out_stream = SparkleMotion::Audio::DeviceOutputStream.new(in_stream.sample_rate, options[:window])
  puts "#{out_stream.name}: Sample rate is #{out_stream.sample_rate}hz."
end

# TODO: Look into this to allow routing AudioHijack output into processor? http://www.ambrosiasw.com/utilities/wta/
# TODO: ... or maybe this? http://www.jackosx.com/
# http://www.abstractnew.com/2014/04/the-fast-fourier-transform-fft-without.html

processor = SparkleMotion::Audio::StreamFilter.new(in_stream, filter, LOGGER, span) do |snapshot, dc|
  computed =  snapshot
              .map do |data|
                # mean, stddev, rms, rmsdev, median
                # NMath.covariance

                #   self.sum(dim,..)     Summation
                #   self.cumsum          Cumulative Summation (for 1-d array)
                #   self.prod(dim,..)    Product (Multiply elements)
                #   self.cumprod         Cumulative Produce (for 1-d array)
                #   self.mean(dim,..)    Mean
                #   self.stddev(dim,..)  Standard deviation
                #   self.rms(dim,..)     Root mean square
                #   self.rmsdev(dim,..)  Root mean square deviation
                #   self.min(dim,..)     Minimum
                #   self.max(dim,..)     Maximum
                # note: * If dimensions are specified, statistics are performed
                #         on those dimensions and the rest dimensions are kept.
                #       * Range can be used.
                #       * If dimension is not specified, statistics are performed
                #         for all the elements.
                #   self.median(dim)   Median in 0..dim (All dimensions if omitted)

                # Complex compound number
                #     self.real
                #     self.imag
                #     self.conj
                #     self.conj!
                #     self.angle    atan2(self.imag, self.real)
                #     self.imag= other  set imaginary part
                #     self.im   multiply by imaginary unit

                # NMath module
                #     sqrt(x)
                #     exp(x)
                #     log(x)
                #     log10(x)
                #     log2(x)
                #     atan2(x,y)
                #     sin,cos,tan
                #     sinh,cosh,tanh
                #     asin,acos,atan
                #     asinh,acosh,atanh
                #     csc,sec,cot
                #     csch,sech,coth
                #     acsc,asec,acot
                #     acsch,asech,acoth
                #     covariance  (no idea why NMath::covariance doesn't work)

                # Because of NArray, the `map` leaves magnitude of each `Complex` in the
                # real component of a new Complex.
                # Magnitude here gives us power**0.5, I think?
                amplitudes = data[filter.nominal_bin_start..filter.nominal_bin_end]
                             .map(&:magnitude)
                             .real
                # .map { |n| Math.log(n) }
                { dc0:    data[0],
                  min:    amplitudes.min,
                  max:    amplitudes.max,
                  median: amplitudes.median,
                  mean:   amplitudes.mean,
                  sum:    amplitudes.sum,
                  rms:    amplitudes.rms }
              end

  reporter.record(dropped_frames: dc,
                  data:           computed)
end

out_stream.start if out_stream
in_stream.start
processor.send_to(options[:map], out_stream) if out_stream
processor.start
reporter.start unless in_stream.finite?

case options[:mode]
when :interactive
  $stdout.puts "Commands:"
  $stdout.puts "  >X    Filter for frequencies above X, defaults to #{range.first}."
  $stdout.puts "  <X    Filter for frequencies below X, defaults to #{range.last}."
  $stdout.puts "  quit  Exit the program."
  $stdout.flush
  loop do
    line = $stdin.gets.strip
    break if line =~ /\Aquit\z/

    range[0] = Regexp.last_match(1).to_i if line =~ />\s*(\d+)/
    range[1] = Regexp.last_match(1).to_i if line =~ /<\s*(\d+)/
    filter.frequency_range = range
  end
when :batch
  loop { sleep 0.1 } unless in_stream.finite?
end

in_stream.stop
processor.await
if in_stream.finite?
  reporter.print_report
else
  reporter.stop
end
out_stream.stop if out_stream
