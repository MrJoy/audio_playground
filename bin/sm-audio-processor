#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"
Bundler.setup
require "thread"
require "coreaudio"
require "numru/fftw3"
include NumRu

# For 300Hz..3kHz:
#    512 == bins 4..36 (33)
#   1024 == bins 8..71 (64)
#   2048 == bins 15..140 (126)
#   4096 == bins 29..280 (252)
WINDOW      = 1024
FREQ_RANGE  = [300, 3_000]

Thread.abort_on_exception = true

# Represents parameters of a simple band-pass filter, and computes which buckets of an FFT are
# relevant.
class BandPassFilter
  attr_reader :frequency_range, :bin_start, :bin_end, :bin_count
  def initialize(freq_range, sample_rate, window, &callback)
    @sample_rate          = sample_rate
    @window               = window
    @callback             = callback
    self.frequency_range  = freq_range
  end

  def frequency_range=(val)
    return if @frequency_range == val
    @frequency_range = val
    compute_bins!
  end

protected

  # def bin_freq(idx); ((idx - 1) * @sample_rate) / @window; end
  def freq_bin(hz); ((hz * @window) / @sample_rate).round + 1; end

  def compute_bins!
    @bin_start = freq_bin(@frequency_range.first)
    @bin_end   = freq_bin(@frequency_range.last)
    @bin_count = bin_end - bin_start + 1
    @callback.call(@bin_start, @bin_end, @bin_count) if @callback
  end
end

queues      = []
input_ths   = []
filter_ths  = []
reports     = []

inbufs = ARGV.map do |device_name|
  device = CoreAudio.devices.find { |dev| dev.name =~ /#{device_name}/ }
  fail "No such device ID!" unless device
  num_channels  = 4
  inbuf         = device.input_buffer(WINDOW)
  sample_rate   = device.actual_rate
  report        = { name:    device.name,
                    dc0:     [nil] * num_channels,
                    min:     [Float::INFINITY] * num_channels,
                    max:     [0.0] * num_channels,
                    current: [0.0] * num_channels,
                    count:   0 }
  filter        = BandPassFilter
                  .new(FREQ_RANGE, sample_rate, WINDOW) do |bin_start, bin_end, bin_count|
                    puts "#{device.name}: ##{bin_count} bins, from #{bin_start} to #{bin_end}."
                    report[:min] = [0.0] * num_channels
                    report[:max] = [0.0] * num_channels
                  end
  reports << report

  puts "#{device.name}: Sampling at #{sample_rate}hz..."

  # Only care about frequencies from 300hz to 3khz...
  # Do we need to go around the mid-point a la the pitch-shifting code did?
  #     half = w.shape[1] / 2
  #     f = FFTW3.fft(w, 1)
  #     shift = 12
  #     f.shape[0].times do |ch|
  #       f[ch, (shift+1)...half] = f[ch, 1...(half-shift)]
  #       f[ch, 1..shift] = 0
  #       f[ch, (half+1)...(w.shape[1]-shift)] = f[ch, (half+shift+1)..-1]
  #       f[ch, -shift..-1] = 0

  # Internal Microphone, Noise Reduction:
  #   No Offset:
  #      512 Samples: Min=1069.6, Max=1331759.8
  #     1024 Samples: Min=1477.9, Max=1874171.2
  #     2048 Samples: Min=1984.8, Max=2620696.1
  #     4096 Samples: Min=2638.2, Max=3489267.6
  #   1 offset:
  #      512 Samples: Min= 986.8, Max=1378807.9
  #     1024 Samples: Min=1552.5, Max=1930567.0
  #     2048 Samples: Min=1329.5, Max=2763622.3
  #     4096 Samples: Min=2697.6, Max=3851381.3

  # TODO: Look into this to allow routing AudioHijack output into processor? http://www.ambrosiasw.com/utilities/wta/
  # http://www.abstractnew.com/2014/04/the-fast-fourier-transform-fft-without.html

  queues << (queue = Queue.new)
  filter_ths << Thread.start do
    loop do
      w = queue.pop
      break unless w
      report[:count] += 1

      # TODO: We get back a 2D matrix.  Is that about stereo channels, or something else?
      f = FFTW3.fft(w, 1)
      fail "Mismatch between channel count, and FFT result!" unless f.shape[0] == num_channels

      # Re-assigning this to pick up any changes.
      filter.frequency_range = FREQ_RANGE

      (0..(num_channels - 1)).each do |ch|
        # Because of NArray, the `map` leaves magnitude of each `Complex` in the
        # real component of a new Complex.
        # Magnitude here gives us power**0.5, I think?
        amplitudes            = f[ch, filter.bin_start..filter.bin_end].map(&:magnitude)
        avg_amplitude         = amplitudes.sum.real / filter.bin_count
        report[:dc0][ch]      = f[ch, 0]
        report[:min][ch]      = avg_amplitude if avg_amplitude < report[:min][ch]
        report[:max][ch]      = avg_amplitude if avg_amplitude > report[:max][ch]
        report[:current][ch]  = avg_amplitude
      end
    end
  end

  input_ths << Thread.start do
    loop do
      queue.push(inbuf.read(WINDOW))
    end
  end
  inbuf
end

reporting_thread = Thread.start do
  loop do
    sleep 0.5
    reports.each do |report|
      title = "%s[%05d]:" % [report[:name], report[:count]]
      puts "%30s %10.1f <= %10.1f <= %10.1f (dc0=%s)" % [title,
                                                         report[:min][0],
                                                         report[:current][0],
                                                         report[:max][0],
                                                         report[:dc0][0]]
      next unless report[:min].length > 1
      (1..(report[:min].length - 1)).each do |ch|
        puts "%30s %10.1f <= %10.1f <= %10.1f (dc0=%s)" % ["",
                                                           report[:min][ch],
                                                           report[:current][ch],
                                                           report[:max][ch],
                                                           report[:dc0][ch]]
      end
    end
    puts
  end
end

inbufs.map(&:start)
$stdout.puts "Commands:"
$stdout.puts "  >X      Filter for frequencies above X, defaults to #{FREQ_RANGE.first}."
$stdout.puts "  <X      Filter for frequencies below X, defaults to #{FREQ_RANGE.last}."
$stdout.puts "  quit    Exit the program."
$stdout.flush

while line = $stdin.gets.strip
  break if line =~ /\Aquit\z/

  FREQ_RANGE[0] = $1.to_i if line =~ />\s*(\d+)/
  FREQ_RANGE[1] = $1.to_i if line =~ /<\s*(\d+)/
end

queues.each { |q| q.push(nil) }
inbufs.map(&:stop)
reporting_thread.kill.join
input_ths.map(&:kill).map(&:join)
filter_ths.map(&:kill).map(&:join)

inbufs.each do |inbuf|
  # TODO: Specify *which* input buffer!
  puts "#{inbuf.dropped_frame} frame dropped at input buffer."
end
