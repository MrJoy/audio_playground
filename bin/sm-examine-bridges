#!/usr/bin/env ruby

###############################################################################
# Early Initialization/Helpers
###############################################################################
lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require "sparkle_motion"
SparkleMotion.init!
SparkleMotion.use_config!
SparkleMotion.use_hue!(api: true)
LOGGER = SparkleMotion.logger
extend SparkleMotion::Hue::HTTP
require "json"
require "set"

###############################################################################
# Helper Functions
###############################################################################
def by_name(hsh); hsh.sort { |(_a_key, a), (_b_key, b)| a["name"] <=> b["name"] }; end

def table(name, data, format, field_names, &callback)
  header     = format % field_names
  row_format = (" " * 12) + format
  puts "  %-9s %s" % ["#{name}:", header]
  by_name(data).each do |key, value|
    puts row_format % callback.call(key, value)
  end
end

###############################################################################
# Main
###############################################################################
bridges = CONFIG["bridges"].values
desired_bridges = ARGV.map { |name| bridges.find { |bridge| bridge["name"] == name } }.compact
desired_bridges = bridges unless desired_bridges.length > 0
requests = desired_bridges.map { |bridge| bridge_query(bridge) }
perform_with_retries(requests) do |request, _status, body|
  response      = JSON.parse(body.join("\n"))
  config        = response["config"]
  expected_name = request.bridge["name"]
  actual_name   = config["name"]
  mismatch      = expected_name != actual_name
  warning       = " -- WARNING: CONFIG FILE THINKS THIS SHOULD BE '#{expected_name}'!" if mismatch

  puts "#{config['name']}:#{warning}"
  puts "  IP:       #{config['ipaddress']}"
  puts "  Gateway:  #{config['gateway']}"
  puts "  Channel:  #{config['zigbeechannel']}"
  puts "  Firmware: #{config['swversion']}"

  light_format = "%-32s %-2s %-6s %-9s %-5s %-5s %-5s %-6s %-6s %-6s"
  light_fields =  %w(Name ID Model Firmware State Bri Sat Hue Alert Effect)
  table("Lights", response["lights"], light_format, light_fields) do |light_id, light_info|
    state = light_info["state"]
    [light_info["name"],
     light_id,
     light_info["modelid"],
     light_info["swversion"],
     state["on"] ? "On" : "Off",
     state["bri"],
     state["sat"],
     state["hue"],
     state["alert"],
     state["effect"]]
  end

  # TODO: The *kind* of group matters.  LightGroup == good.  LightSource / Luminaire == magical.
  group_format = "%-32s %-2s %s"
  group_fields =  %w(Name ID Lights)
  table("Groups", response["groups"], group_format, group_fields) do |group_id, group_info|
    [group_info["name"], group_id, group_info["lights"].map(&:to_i).join(", ")]
  end
end
