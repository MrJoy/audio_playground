#!/usr/bin/env ruby

###############################################################################
# Early Initialization/Helpers
###############################################################################
lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require "sparkle_motion"
SparkleMotion.init!("sm-on")
SparkleMotion.use_hue!(api: true)
LOGGER = SparkleMotion.logger
extend SparkleMotion::Hue::HTTP

###############################################################################
# Effect
#
# Tweak this to change the visual effect.
###############################################################################
# TODO: Allow this for per-bridge / per-group...
# TODO: Allow CLI parameters as well.
INIT_HUE      = CONFIG["initial_state"]["hue"]
INIT_SAT      = CONFIG["initial_state"]["sat"]
INIT_BRI      = CONFIG["initial_state"]["bri"]
LIGHT_PARAMS  = { "on"     => true,
                  "bri"    => INIT_BRI,
                  "sat"    => INIT_SAT,
                  "hue"    => INIT_HUE,
                  "alert"  => "none",
                  "effect" => "none" }

###############################################################################
# Main
###############################################################################
# TODO: Allow specifying bridges, groups of lights, or just lights.
requests = CONFIG["bridges"]
           .values
           .map { |bridge| group_update(bridge, 0, payload: LIGHT_PARAMS) }
perform_with_retries(requests) do |request, _status, _body|
  LOGGER.info { "Broadcast to all-lights group sent to #{request.bridge['name']}!" }
end
