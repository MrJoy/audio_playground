#!/usr/bin/env ruby

###############################################################################
# Early Initialization/Helpers
###############################################################################
lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require "sparkle_motion"
SparkleMotion.init!("on")
SparkleMotion.use_hue!(api: true)
LOGGER = SparkleMotion.logger
extend SparkleMotion::Hue::HTTP

###############################################################################
# Effect
#
# Tweak this to change the visual effect.
###############################################################################
# TODO: Allow this for per-bridge / per-group...
INIT_HUE = CONFIG["initial_state"]["hue"]
INIT_SAT = CONFIG["initial_state"]["sat"]
INIT_BRI = CONFIG["initial_state"]["bri"]

###############################################################################
# Helper Functions
###############################################################################
def make_req_struct(url, data)
  { method:   :put,
    url:      url,
    put_data: Oj.dump(data) }.merge(SparkleMotion::Hue::HTTP::EASY_OPTIONS)
end

def hue_init(config)
  make_req_struct(hue_group_endpoint(config, 0), "on"  => true,
                                                 "bri" => INIT_BRI,
                                                 "sat" => INIT_SAT,
                                                 "hue" => INIT_HUE)
end

###############################################################################
# Main
###############################################################################
# TODO: Hoist common code from sm-on, sm-off, sm-mark-lights...
bridges   = CONFIG["bridges"].keys.length
requests  = CONFIG["bridges"]
            .values
            .map { |config| hue_init(config) }
reqs      = Hash[requests.map { |req| [req[:url], req.dup] }]
retries   = 0
opts      = SparkleMotion::Hue::HTTP::MULTI_OPTIONS.merge(max_connects: bridges)
while requests.length > 0
  retry_queue = []
  Curl::Multi.http(requests, opts) do |easy|
    puts easy.url
    if easy.response_code != 200 || easy.body =~ /error/
      url = easy.url
      LOGGER.error { "#{url} => #{easy.response_code} / #{easy.body}" }
      retry_queue << url
    end
  end
  requests = retry_queue.map { |url| reqs[url] }
  retries += 1
  sleep 0.5 * (2**retries) if requests.length > 0
end
