#!/usr/bin/env ruby
# Benchmarks:
#   Baseline:         0.16..0.20
#   Heap Slot Tuning: 0.15..0.20

# def bench_init!; @first_time = @last_time = Time.now.to_f; end

# def bench_snap!(depth = 0)
#   t = Time.now.to_f
#   elapsed = t - @last_time
#   @last_time = t
#   key = caller[depth].split(":")[0..1].join(":").split("/").last
#   key = "TOTAL" if depth > 0
#   puts "%s => %f sec (@%f)" % [key, elapsed, t]
# end

# def bench_end!
#   @last_time = @first_time
#   bench_snap!(2)

#   # From: http://eng.rightscale.com/2015/09/16/how-to-debug-ruby-memory-issues.html
#   GC.start # Start a full garbage collection
#   s = GC.stat # Take a snapshot of the gc status
#   recommended_slots = GC.stat(:heap_live_slots) * (s[:old_objects] / s[:heap_live_slots].to_f)

#   puts s.inspect
#   puts "Recommended heap slots: #{recommended_slots}"
# end

# TODO: Run update across nodes from back to front for simulation rather than
# TODO: relying on a call-chain.  This should make it easy to eliminate the
# TODO: `yield` usage and avoid associated allocations.

# TODO: Deeper memory profiling to ensure this process can run for hours.

# TODO: Pick four downlights for the dance floor, and treat them as a separate
# TODO: simulation.  Consider how spotlighting and the like will be relevant to
# TODO: them.

#   f = Fiber.new do
#     meth(1) do
#       Fiber.yield
#     end
#   end
#   meth(2) do
#     f.resume
#   end
#   f.resume
#   p Thread.current[:name]

###############################################################################
# Early Initialization/Helpers
###############################################################################
bench_init! if defined?(bench_init!)
lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require "sparkle_motion"
require "set"

SparkleMotion.init!
SparkleMotion.use_config!
# We load the following unconditionally because so much plugs into the graph
# we don't currently have a good way of decoupling things gracefully.  So all
# USE_GRAPH=0 really means is that we don't run the simulation thread.
SparkleMotion.use_graph!

# Code loading / modular behavior configuration:
USE_LIGHTS  = env_bool("USE_LIGHTS")
USE_SWEEP   = env_bool("USE_SWEEP")
USE_GRAPH   = env_bool("USE_GRAPH")
SparkleMotion.use_hue!(api: true)
SparkleMotion.use_widgets!
SparkleMotion.use_input!

# Crufty common code:
require "sparkle_motion/simulation/output"
require "sparkle_motion/simulation/command_queue_task"
require "sparkle_motion/simulation/render_task"
require "sparkle_motion/simulation/surface_master_task"
require "sparkle_motion/simulation/graph_task"
require "sparkle_motion/simulation/sweeper_task"
extend SparkleMotion::Simulation::Output
extend SparkleMotion::Hue::HTTP

###############################################################################
# Profiling and Debugging
###############################################################################
LOGGER        = SparkleMotion.logger
profile_run   = ENV["PROFILE_RUN"]
PROFILE_RUN   = (profile_run != "") ? profile_run : nil
SKIP_GC       = env_bool("SKIP_GC")
DEBUG_FLAGS   = Hash[(ENV["DEBUG_NODES"] || "")
                     .split(/\s*,\s*/)
                     .map(&:upcase)
                     .map { |nn| [nn, true] }]

###############################################################################
# Shared State Setup
###############################################################################
# TODO: Run all simulations, and use a mixer to blend between them...
num_lights         = CONFIG["light_groups"]["main_lights"].length
LIGHTS_FOR_THREADS = SparkleMotion::LightConfig.new(config: CONFIG, groups: %w(main_lights))
INTERACTIONS = {}
[["launchpad", SurfaceMaster::Launchpad::Interaction],
 ["orbit", SurfaceMaster::Orbit::Interaction]].each do |name, klass|
  begin
    INTERACTIONS[name] = klass.new(logger: LOGGER)
  rescue SurfaceMaster::NoSuchDeviceError
    LOGGER.error { "Couldn't talk to device: '#{name}'!  Ignoring it, and proceeding!" }
  end
end
INT_STATES              = []
NODES                   = {}
PENDING_COMMANDS        = []
CURRENT_STATE           = {}
STATE_FILENAME          = "/tmp/sparkle-motion.state"
SKIP_STATE_PERSISTENCE  = [false]
HAVE_STATE_FILE         = File.exist?(STATE_FILENAME)
if HAVE_STATE_FILE
  age = Time.now.to_f - File.stat(STATE_FILENAME).mtime.to_f
  if age > 3600
    LOGGER.warn do
      "#{STATE_FILENAME} is #{age} seconds old!"\
        "  This is probably not what you want, but you're the boss..."
    end
  end
  begin
    state_temp = YAML.load_file(STATE_FILENAME)
  rescue Psych::SyntaxError => pse
    LOGGER.error { "Got error parsing state file: " }
    LOGGER.error { pse }
  end
  CURRENT_STATE.merge!(state_temp) if state_temp
end

def update_state!(key, value)
  old_value = CURRENT_STATE[key]
  return if old_value == value
  CURRENT_STATE[key] = value
  return if SKIP_STATE_PERSISTENCE[0]
  LOGGER.debug { "Persisting control state." }
  # TODO: Maybe keep the file open, and rewind?
  File.open(STATE_FILENAME, "w") do |fh|
    fh.write(CURRENT_STATE.to_yaml)
  end
end

###############################################################################
# Simulation Graph Configuration / Setup
###############################################################################
# Root nodes (don't act as modifiers on other nodes' output):
p_speed         = [0.1, 4.0]
NODES["PERLIN"] = SparkleMotion::Nodes::Generators::Perlin.new(lights: num_lights, speed: p_speed)
last            = NODES["PERLIN"]

# Create a means of controlling brightness in the food area.
def bri_req(ival, bri_len, bri_bridge, bri_group)
  data = with_transition_time(bri_len, "bri" => (255 * ival).round)
  { method:   :put,
    url:      hue_group_endpoint(bri_bridge, bri_group),
    put_data: Oj.dump(data) }.merge(SparkleMotion::Hue::HTTP::EASY_OPTIONS)
end
bri_cfg     = CONFIG["controls"]["food_area"]
bri_groups  = bri_cfg["groups"]
              .map do |(bridge_name, group_name)|
                bridge  = CONFIG["bridges"][bridge_name]
                group   = bridge["groups"][group_name]
                [bridge, group]
              end
BRI_STATE   = SparkleMotion::LaunchPad::Widgets::VerticalSlider
              .new(launchpad: INTERACTIONS["launchpad"],
                   position:  SparkleMotion::Vector2.new(bri_cfg["position"]),
                   size:      bri_cfg["values"].length,
                   colors:    { "on":   :light_gray,
                                "off":  :dark_gray,
                                "down": :white },
                   on_change: proc do |val|
                     ival = bri_cfg["values"][val]
                     LOGGER.info { "Brightness[#{val}]: #{ival}" }

                     update_state!("BRIGHTNESS", val)
                     bri_groups.each do |(bridge, group_id)|
                       req = bri_req(ival, bri_cfg["transition"], bridge, group_id)
                       PENDING_COMMANDS.each { |queue| queue << req }
                     end
                   end)

# Transform nodes (act as a chain of modifiers):
c_fun               = "cubic"
c_iter              = 3
NODES["STRETCHED"]  = last = SparkleMotion::Nodes::Transforms::Contrast.new(function:   c_fun,
                                                                            iterations: c_iter,
                                                                            source:     last)
# Create one control group here per "quadrant"...
intensity_cfg = CONFIG["controls"]["intensity"]
intensity_cfg["lights"].each_with_index do |light_ids, idx|
  mask        = Hash[light_ids.map { |light_id| [light_id, true] }]
  int_vals    = intensity_cfg["values"]
  int_key     = "SHIFTED_#{idx}"
  last        = SparkleMotion::Nodes::Transforms::Range.new(source: last,
                                                            mask:   mask,
                                                            logger: LOGGER)
  NODES[int_key]  = last
  INT_STATES[idx] = SparkleMotion::LaunchPad::Widgets::VerticalSlider
                    .new(launchpad: INTERACTIONS["launchpad"],
                         position:  SparkleMotion::Vector2.new(intensity_cfg["positions"][idx]),
                         size:      int_vals.length,
                         colors:    { "on":   0x22003F,
                                      "off":  0x05000A,
                                      "down": 0x27103F },
                         on_change: proc do |val|
                           ival = int_vals[val]
                           LOGGER.info { "Intensity[#{idx},#{val}]: #{ival}" }
                           NODES[int_key].set_range(ival[0], ival[1])
                           update_state!(int_key, val)
                         end)
end

def sat_req(ival, sat_len, sat_bridge, sat_group)
  data = with_transition_time(sat_len, "sat" => (255 * ival).round)
  { method:   :put,
    url:      hue_group_endpoint(sat_bridge, sat_group),
    put_data: Oj.dump(data) }.merge(SparkleMotion::Hue::HTTP::EASY_OPTIONS)
end

SAT_STATES = []
sat_cfg     = CONFIG["controls"]["saturation"]
sat_len     = sat_cfg["transition"]
sat_vals    = sat_cfg["values"]
sat_grps    = sat_cfg["groups"]
sat_cfg["positions"].each_with_index do |pos, idx|
  pos           = pos.to_sym
  sat_grp_info  = sat_grps[idx]
  sat_groups    = []
  sat_grp_info.each do |sat_grp|
    sat_bridge = CONFIG["bridges"][sat_grp[0]]
    sat_group  = sat_grp[1]
    sat_groups << [sat_bridge, sat_bridge["groups"][sat_group]]
  end
  sat_key       = "SAT_STATES[#{idx}]"
  int_key       = "SHIFTED_#{idx}"
  widget        = SparkleMotion::LaunchPad::Widgets::Toggle
                  .new(launchpad:     INTERACTIONS["launchpad"],
                       position:      pos,
                       colors:        { "on":   0x3F103F,
                                        "off":  0x030303,
                                        "down": 0x1C103F },
                       on_press:     proc do |val|
                         ival, bri_max = sat_vals[val]
                         NODES[int_key].clamp_to(bri_max)
                         LOGGER.info { "Saturation[#{idx},#{val}]: #{ival}" }
                         sat_groups.each do |(sat_bridge, sat_group)|
                           req = sat_req(ival, sat_len, sat_bridge, sat_group)
                           # TODO: Delay the saturation update until the
                           # brightness has taken effect.
                           PENDING_COMMANDS.each { |queue| queue << req }
                         end
                         update_state!(sat_key, val)
                       end)
  SAT_STATES << widget
  orbit_pos = sat_cfg["positions_no"][idx]
  next unless orbit_pos && INTERACTIONS["orbit"]
  xx = orbit_pos[0]
  yy = orbit_pos[1]
  INTERACTIONS["orbit"].response_to(:grid, :down, x: xx, y: yy) do |_inter, _action|
    SAT_STATES[idx].send(:pressed!, position: pos)
    SAT_STATES[idx].send(:on_down, position: pos)
  end
  INTERACTIONS["orbit"].response_to(:grid, :up, x: xx, y: yy) do |_inter, _action|
    SAT_STATES[idx].send(:released!, position: pos)
    SAT_STATES[idx].send(:on_up, position: pos)
  end
end

sl_cfg                  = CONFIG["controls"]["spotlighting"]
sl_base                 = sl_cfg["base"]
sl_exp                  = sl_cfg["exponent"]
last = NODES["SPOTLIT"] = SparkleMotion::Nodes::Transforms::Spotlight.new(source:   last,
                                                                          base:     sl_base,
                                                                          exponent: sl_exp)
FINAL_RESULT            = last # The end node that will be rendered to the lights.
sl_map                  = sl_cfg["mappings"]
sl_pos_map              = sl_map.flatten
sl_key                  = "SPOTLIT"
sl_pos                  = SparkleMotion::Vector2.new(sl_cfg["position"])
sl_size                 = SparkleMotion::Vector2.new(sl_map.map(&:length).sort[-1], sl_map.length)
SL_STATE                = SparkleMotion::LaunchPad::Widgets::RadioGroup
                          .new(launchpad:   INTERACTIONS["launchpad"],
                               position:    sl_pos,
                               size:        sl_size,
                               colors:      { "on":   0x032727,
                                              "off":  0x000202,
                                              "down": 0x103F3F },
                               on_select:   proc do |x|
                                 LOGGER.info { "Spot ##{sl_pos_map[x]}" }
                                 NODES[sl_key].spotlight!(sl_pos_map[x])
                                 update_state!(sl_key, x)
                               end,
                               on_deselect: proc do
                                 LOGGER.info { "Spot Off" }
                                 NODES[sl_key].spotlight!(nil)
                                 update_state!(sl_key, nil)
                               end)

NODES.each do |name, node|
  node.debug = DEBUG_FLAGS[name]
end

###############################################################################
# Operational Configuration
###############################################################################
TIME_TO_DIE = [false, :terminate]

###############################################################################
# Profiling Support
###############################################################################
# TODO: Make this optional.
e_cfg = CONFIG["controls"]["exit"]
EXIT_BUTTON = SparkleMotion::LaunchPad::Widgets::Button.new(launchpad: INTERACTIONS["launchpad"],
                                                            position:  e_cfg["position"].to_sym,
                                                            colors:    { "color": :dark_gray,
                                                                         "down":  :white },
                                                            on_press:  lambda do |value|
                                                              return unless value != 0
                                                              LOGGER.unknown { "Kick!" }
                                                              # If we try to die *graceully*, we can get caught behind
                                                              # backlogs of failed hardware -- so die UN-gracefully.
                                                              clear_board! # Just for visual feedback...
                                                              exit 127
                                                              # TIME_TO_DIE[1] = :restart
                                                              # TIME_TO_DIE[0] = true
                                                            end)

def start_ruby_prof!
  return unless PROFILE_RUN == "ruby-prof"

  SparkleMotion.logger.unknown { "Enabling ruby-prof, be careful!" }
  require "ruby-prof"
  RubyProf.measure_mode = RubyProf.const_get(ENV.fetch("RUBY_PROF_MODE").upcase)
  RubyProf.start
end

def stop_ruby_prof!
  return unless PROFILE_RUN == "ruby-prof"

  result  = RubyProf.stop
  printer = RubyProf::CallTreePrinter.new(result)
  File.open("tmp/results.html", "w") do |fh|
    printer.print(fh, min_percent: 1)
  end
end

###############################################################################
# Main Simulation
###############################################################################
def clear_board!
  # TODO: Generalize this to deal with the entire board.

  # TODO: Hoist setup / teardown of the board into separate binaries and
  # TODO: don't do it from here to avoid startup overhead!

  INT_STATES.map(&:blank)
  sleep 0.01 # 88 updates/sec input limit!
  SAT_STATES.map(&:blank)
  # sleep 0.01 # 88 updates/sec input limit!
  BRI_STATE.blank
  # sleep 0.01 # 88 updates/sec input limit!
  EXIT_BUTTON.blank
  sleep 0.01 # 88 updates/sec input limit!
  SL_STATE.blank
end

def without_persistence(&block)
  SKIP_STATE_PERSISTENCE[0] = defined?(LaunchPad) ? true : false
  block.call
ensure
  SKIP_STATE_PERSISTENCE[0] = false
end

def setup_intensity_controls!
  INT_STATES.each_with_index do |ctrl, idx|
    ctrl.update(CURRENT_STATE.fetch("SHIFTED_#{idx}", ctrl.max_v / 2))
  end
end

def setup_saturation_controls!
  SAT_STATES.each_with_index do |ctrl, idx|
    tmp = CURRENT_STATE.fetch("SAT_STATES[#{idx}]", 1)
    ctrl.update(tmp == 0 ? 1 : 0)
    ctrl.send(:on_down, position: ctrl.position)
    ctrl.send(:on_up, position: ctrl.position)
  end
end

def setup_brightness_controls!
  BRI_STATE.update(CURRENT_STATE.fetch("BRIGHTNESS", BRI_STATE.max_v / 2))
end

def setup_spotlight_controls!
  SL_STATE.update(CURRENT_STATE.fetch("SPOTLIT", nil))
end

def setup_exit_controls!
  EXIT_BUTTON.update(false)
end

def launch_input_threads!(command_queue, logger)
  setup_control_state!(command_queue)

  INTERACTIONS
    .map { |(nn, cc)| SparkleMotion::Simulation::SurfaceMasterTask.new(nn, cc, logger) }
    .compact
end

def setup_control_state!(command_queue)
  without_persistence do
    setup_intensity_controls!
    setup_saturation_controls!
    setup_brightness_controls!
    setup_spotlight_controls!
    setup_exit_controls!
  end

  # Don't send updates from our attempts at setting things up when we're picking up where we left
  # off...
  command_queue.clear if command_queue
end

def launch_graph_thread!(logger)
  SparkleMotion::Simulation::GraphTask.new("Simulation",
                                           FINAL_RESULT,
                                           SparkleMotion::Node::FRAME_PERIOD,
                                           logger)
end

def launch_sweep_threads!(sweep_cfgs, command_queue, logger)
  return [] unless USE_SWEEP
  sweep_cfgs.map do |config|
    targets = config["targets"]
              .map do |(name, group)|
                bridge = CONFIG["bridges"][name]
                [bridge, bridge["groups"][group]]
              end
    SparkleMotion::Simulation::SweeperTask.new(targets:       targets,
                                               config:        config,
                                               logger:        logger,
                                               command_queue: command_queue)
  end
end

def light_thread!(bridge, global_results, debug, logger)
  lights = LIGHTS_FOR_THREADS.lights[bridge["name"]]

  LOGGER.unknown do
    light_list = lights.map(&:first).join(", ")
    "#{bridge['name']}: Thread will handle #{lights.count} lights (#{light_list})."
  end

  SparkleMotion::Simulation::RenderTask.new(node:           FINAL_RESULT,
                                            bridge:         bridge,
                                            lights:         lights,
                                            global_results: global_results,
                                            logger:         logger,
                                            debug:          debug)
end

def launch_command_queue_thread!(logger)
  SparkleMotion::Simulation::CommandQueueTask.new(logger)
end

def launch_light_threads!(global_results, debug, logger)
  threads = []

  threads += LIGHTS_FOR_THREADS.bridges.values.map do |bridge|
    light_thread!(bridge, global_results, debug, logger)
  end

  threads
end

def launch_graph_threads!(logger); [launch_graph_thread!(logger)]; end

def launch_all_threads!(config, global_results, debug, logger)
  command_queue = launch_command_queue_thread!(logger)
  PENDING_COMMANDS << command_queue if command_queue
  tmp = { input:   launch_input_threads!(command_queue, logger),
          graph:   launch_graph_threads!(logger),
          sweep:   launch_sweep_threads!(config["sweepers"], command_queue, logger),
          command: [command_queue],
          lights:  launch_light_threads!(global_results, debug["OUTPUT"], logger) }
  tmp.values.map(&:compact!)
  tmp[:all] = tmp.values.flatten.compact
  tmp
end

def pre_init!
  trap("INT") do
    TIME_TO_DIE[0] = true
    # If we hit ctrl-c, it'll show up on the terminal, mucking with log output right when we're
    # about to produce reports.  This annoys me, so I'm working around it:
    puts
  end
  Thread.abort_on_exception = true
end

def nodes_under_debug
  NODES.select { |name, _node| DEBUG_FLAGS[name] }
end

def debugging?
  nodes_under_debug.length > 0 || DEBUG_FLAGS["OUTPUT"] || PROFILE_RUN
end

def init!(global_results)
  LOGGER.unknown { "Initializing system..." }
  if SKIP_GC
    LOGGER.unknown { "Disabling garbage collection!  BE CAREFUL!" }
    GC.disable
  end
  global_results.begin! if global_results
  start_ruby_prof!
  FINAL_RESULT.update(Time.now.to_f)
end

def wake!(threads)
  LOGGER.unknown { "Final setup done, waking threads..." }
  threads.each(&:start)
end

def spin!(threads)
  LOGGER.unknown { "Waiting for the world to end..." }
  loop do
    # Someone hit the exit button:
    break if TIME_TO_DIE[0]
    # ... the `- 1` is for the command queue thread!
    unfinished = (threads.length - threads.count { |th| th.status == false }) - 1
    break if USE_LIGHTS && unfinished == 0
    sleep 0.25
  end
end

def stop!(threads)
  LOGGER.unknown { "Stopping threads..." }
  %i(lights command sweep graph input).each do |thread_group|
    threads[thread_group].each(&:stop)
  end
  threads[:all].map(&:await)
end

def main
  pre_init!

  global_results  = SparkleMotion::Results.new(logger: LOGGER) if defined?(SparkleMotion::Results)
  threads         = launch_all_threads!(CONFIG, global_results, DEBUG_FLAGS, LOGGER)

  init!(global_results)
  wake!(threads[:all])
  spin!(threads[:lights])
  stop!(threads)

  LOGGER.unknown { "Doing final shutdown..." }
  global_results.done! if global_results
  clear_board!

  print_results(global_results) if global_results
  dump_debug_data!
end

def profile!(&block)
  unless PROFILE_RUN == "memory_profiler"
    block.call
    return
  end

  LOGGER.unknown { "Enabling memory_profiler, be careful!" }
  require "memory_profiler"
  Thread.new do
    sleep 60
    TIME_TO_DIE[0] = true
  end
  report = MemoryProfiler.report do
    block.call
    LOGGER.unknown { "Preparing MemoryProfiler report." }
  end
  LOGGER.unknown { "Dumping MemoryProfiler report." }
  # TODO: Dump this to a file...
  report.pretty_print
end

###############################################################################
# Launcher
###############################################################################
profile! do
  bench_end! if defined?(bench_end!)
  main
end

exit 127 if TIME_TO_DIE[1] == :restart
